package lib.visitors;

import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.visitor.VoidVisitorAdapter;
import lib.Logger;
import lib.reports.info.InfoBuilder;
import lib.reports.info.interfaces.MethodInfo;
import lib.reports.interfaces.InterfaceReport;

/**
 * File visitor that extends from {@link VoidVisitorAdapter}
 *
 * @param <T> type of the report generated by visitor. It can be an {@link InterfaceReport} or a {@link lib.reports.interfaces.ClassReport} based on what the file
 *            represents.
 * @see com.github.javaparser.ast.visitor.VoidVisitorAdapter
 */
public class FileVisitor<T extends InterfaceReport> extends VoidVisitorAdapter<T> {

    private final boolean attachModifiers;
    /**
     * @see Logger
     */
    protected Logger logger;

    /**
     * Class constructor
     *
     * @param attachModifiers true to put modifiers in report
     * @param logger          logger where send message when incurred new find
     */
    public FileVisitor(boolean attachModifiers, Logger logger) {
        this.logger = logger;
        this.attachModifiers = attachModifiers;
    }

    /**
     * Visit a node representing the declaration of the class or the interface that the file contains. Used to save name and path inside the collector.
     *
     * @param cd        - {@link ClassOrInterfaceDeclaration} that contains the declaration
     * @param collector - where to save the name and path information
     */
    public void visit(ClassOrInterfaceDeclaration cd, T collector) {
        super.visit(cd, collector);
        collector.setName(cd.getNameAsString());
        collector.setFullPath(cd.getFullyQualifiedName().orElse("Fully class name not found"));
    }

    /**
     * Visit a node representing a method of the class or interface and save its information inside the collector.
     *
     * @param md        - {@link MethodDeclaration} that contains the method information
     * @param collector - where to save the field information
     */
    public void visit(MethodDeclaration md, T collector) {
        super.visit(md, collector);
        buildMethodInfo(md, collector);
    }

    private void buildMethodInfo(MethodDeclaration md, T collector) {
        InfoBuilder builder = new InfoBuilder().report(collector).name(md.getNameAsExpression().toString());

        if (this.attachModifiers) {
            builder.modifiers(md.getModifiers().toString());
        }
        if (md.getRange().isPresent()) {
            builder.beginLine(md.getRange().get().begin.line).endLine(md.getRange().get().end.line);
        } else {
            builder.beginLine(-1).endLine(-1);
        }
        MethodInfo method = builder.buildMethod();
        logger.log(method);
        collector.addMethodInfo(method);
    }

}
